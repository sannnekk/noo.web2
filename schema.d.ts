/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/assigned-work/of-user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the current user's list of assigned works. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    userId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignedWorkDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets an assigned work by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignedWorkDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Deletes an assigned work.
         * @description Only possible if the status of the assigned work is not Solved.
         *     Otherwise, it will return a 409 Conflict status code.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the progress of an assigned work by its ID.
         *     Used when loading the whole assigned work is not needed */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignedWorkProgressDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/remake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remakes an assigned work.
         *     Returns the ID of the newly created assigned work. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RemakeAssignedWorkOptionsDTO"];
                    "text/json": components["schemas"]["RemakeAssignedWorkOptionsDTO"];
                    "application/*+json": components["schemas"]["RemakeAssignedWorkOptionsDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/save-answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Saves an Answer to an assigned work.
         *     This is used by students to submit their answers to assigned works,
         *     or by mentors to save their comments on the assigned work.
         *     If the answer already exists, it will be updated.
         *     If the answer does not exist, it will be created.
         * @description It will also update the status of the assigned work to "In Progress" if it was not already.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpsertAssignedWorkAnswerDTO"];
                    "text/json": components["schemas"]["UpsertAssignedWorkAnswerDTO"];
                    "application/*+json": components["schemas"]["UpsertAssignedWorkAnswerDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Saves a comment to an assigned work.
         *     This is used by both students and mentors to comment on an assigned work.
         *     If the comment already exists, it will be updated.
         *     If the comment does not exist, it will be created.
         * @description It will also update the status of the assigned work to "In Progress" if it was not already.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpsertAssignedWorkCommentDTO"];
                    "text/json": components["schemas"]["UpsertAssignedWorkCommentDTO"];
                    "application/*+json": components["schemas"]["UpsertAssignedWorkCommentDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/mark-solved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks an assigned work as solved. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/mark-checked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks an assigned work as checked */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Archives an assigned work.
         * @description There is an archived flag in the assigned work for the following roles: student, mentor, and assistant.
         *     Toggling the archived flag for mentors will not affect the archived flag for students and assistants and so on.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * unarchives an assigned work.
         * @description There is an archived flag in the assigned work for the following roles: student, mentor, and assistant.
         *     Toggling the archived flag for mentors will not affect the archived flag for students and assistants and so on.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/add-helper-mentor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Adds a helper mentor to the assigned work so that they both can check the assigned work. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AddHelperMentorOptionsDTO"];
                    "text/json": components["schemas"]["AddHelperMentorOptionsDTO"];
                    "application/*+json": components["schemas"]["AddHelperMentorOptionsDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/replace-main-mentor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Replace main mentor of the assigned work */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReplaceMainMentorOptionsDTO"];
                    "text/json": components["schemas"]["ReplaceMainMentorOptionsDTO"];
                    "application/*+json": components["schemas"]["ReplaceMainMentorOptionsDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/shift-deadline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Shift deadline of the assigned work */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShiftAssignedWorkDeadlineOptionsDTO"];
                    "text/json": components["schemas"]["ShiftAssignedWorkDeadlineOptionsDTO"];
                    "application/*+json": components["schemas"]["ShiftAssignedWorkDeadlineOptionsDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/return-to-solve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Changes the solve status of the assigned work back to in progress.
         *     This is usually used when the assigned work was marked as solved by mistake. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/assigned-work/{assignedWorkId}/return-to-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Changes the check status of the assigned work back to in progress.
         *     This is usually used when the assigned work was marked as checked by mistake. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    assignedWorkId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logs in a user with the provided credentials. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginDTO"];
                    "text/json": components["schemas"]["LoginDTO"];
                    "application/*+json": components["schemas"]["LoginDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Registers a new user with the provided details.
         *     During registration, an email verification token is sent to the user's email address. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegisterDTO"];
                    "text/json": components["schemas"]["RegisterDTO"];
                    "application/*+json": components["schemas"]["RegisterDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/username-check/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Checks if the username is already taken.
         *     Returns true if the username is free, otherwise false */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BooleanApiResponseDTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/request-password-change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Requests a password change by sending a reset token to the user's email address. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestPasswordChangeDTO"];
                    "text/json": components["schemas"]["RequestPasswordChangeDTO"];
                    "application/*+json": components["schemas"]["RequestPasswordChangeDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/auth/confirm-password-change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Confirms a password change by validating the reset token and setting a new password. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ConfirmPasswordChangeDTO"];
                    "text/json": components["schemas"]["ConfirmPasswordChangeDTO"];
                    "application/*+json": components["schemas"]["ConfirmPasswordChangeDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/auth/confirm-email-change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Confirms an email change by validating the confirmation token.
         *     This endpoint is used to finalize the email change process after the user has requested it. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ConfirmEmailChangeDTO"];
                    "text/json": components["schemas"]["ConfirmEmailChangeDTO"];
                    "application/*+json": components["schemas"]["ConfirmEmailChangeDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/calendar/{userId}/{year}/{month}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the current user's calendar events. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    userId: components["schemas"]["Ulid"];
                    year: number;
                    month: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CalendarEventDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new calendar event for the current user. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateCalendarEventDTO"];
                    "text/json": components["schemas"]["CreateCalendarEventDTO"];
                    "application/*+json": components["schemas"]["CreateCalendarEventDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a calendar event by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a course and its chapter/material tree by its unique identifier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    courseId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CourseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search courses */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CourseModelIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-sheets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of Google Sheets integrations based on the provided criteria. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GoogleSheetsIntegrationDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new Google Sheets integration. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateGoogleSheetsIntegrationDTO"];
                    "text/json": components["schemas"]["CreateGoogleSheetsIntegrationDTO"];
                    "application/*+json": components["schemas"]["CreateGoogleSheetsIntegrationDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-sheets/{integrationId}/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Runs a Google Sheets integration by its ID. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    integrationId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-sheets/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a Google Sheets integration by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    integrationId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nootube": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NooTubeVideoDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the notifications for the user. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotificationDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Bulk create notiifcations */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BulkCreateNotificationsDTO"];
                    "text/json": components["schemas"]["BulkCreateNotificationsDTO"];
                    "application/*+json": components["schemas"]["BulkCreateNotificationsDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/{notificationId}/mark-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark a notification as read */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    notificationId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/notification/{notificationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a notification */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    notificationId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/platform/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the current platform version. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/platform/changelog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the changelog */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChangeLogDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/poll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of polls based on the provided criteria. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PollDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new poll. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreatePollDTO"];
                    "text/json": components["schemas"]["CreatePollDTO"];
                    "application/*+json": components["schemas"]["CreatePollDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/poll/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific poll by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PollDTOApiResponseDTO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/poll/{pollId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    pollId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update an existing poll. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    pollId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the current user's list of sessions. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deleted the current user session.
         *     Typically used to log out the user. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a specific session by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    sessionId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snippet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the snippets for the authenticated user. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SnippetDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new snippet for the authenticated user. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSnippetDTO"];
                    "text/json": components["schemas"]["CreateSnippetDTO"];
                    "application/*+json": components["schemas"]["CreateSnippetDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snippet/{snippetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes an existing snippet for the authenticated user. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    snippetId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates an existing snippet for the authenticated user. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    snippetId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/statistics/platform": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the current statistics of the platform. */
        get: {
            parameters: {
                query?: {
                    from?: string;
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatisticsDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistics/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the statistics of a specific student.
         * @description It returns 404 only if the student does not exist or is not a student.
         */
        get: {
            parameters: {
                query?: {
                    from?: string;
                    to?: string;
                };
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    studentId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatisticsDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistics/mentor/{mentorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the statistics of a specific mentor.
         * @description It returns 404 only if the mentor does not exist or is not a mentor.
         */
        get: {
            parameters: {
                query?: {
                    from?: string;
                    to?: string;
                };
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    mentorId: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatisticsDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of subjects based on the provided criteria. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SubjectDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new subject with the provided details. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SubjectCreationDTO"];
                    "text/json": components["schemas"]["SubjectCreationDTO"];
                    "application/*+json": components["schemas"]["SubjectCreationDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subject/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a subject by its unique identifier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SubjectDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deletes a subject by its unique identifier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates an existing subject with the provided details. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/support": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a tree of support categories. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SupportCategoryDTOIEnumerableApiResponseDTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/article/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a support article by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SupportArticleDTOApiResponseDTO"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deletes a support article by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates a support article by its ID using a JSON Patch document. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/support/article": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new support article. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSupportArticleDTO"];
                    "text/json": components["schemas"]["CreateSupportArticleDTO"];
                    "application/*+json": components["schemas"]["CreateSupportArticleDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new support category. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSupportCategoryDTO"];
                    "text/json": components["schemas"]["CreateSupportCategoryDTO"];
                    "application/*+json": components["schemas"]["CreateSupportCategoryDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a support category by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates a support category by its ID using a JSON Patch document. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the current user's information based on the authenticated user's ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deletes the current user's account.
         *     It won't delete the user from the database, but mark it as deleted and remove all personal data. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates the current user's email address. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateEmailDTO"];
                    "text/json": components["schemas"]["UpdateEmailDTO"];
                    "application/*+json": components["schemas"]["UpdateEmailDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates the current user's password. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdatePasswordDTO"];
                    "text/json": components["schemas"]["UpdatePasswordDTO"];
                    "application/*+json": components["schemas"]["UpdatePasswordDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/me/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates the current user's Telegram data like username, avatar and telegram ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTelegramDTO"];
                    "text/json": components["schemas"]["UpdateTelegramDTO"];
                    "application/*+json": components["schemas"]["UpdateTelegramDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/me/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": components["schemas"]["UpdateAvatarDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of users based on the provided search criteria. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a user by their unique username */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Changes the role of a user by their unique identifier.
         *     Only possible to change role if the user is a student, otherwise it will throw a conflict error. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserRoles"];
                    "text/json": components["schemas"]["UserRoles"];
                    "application/*+json": components["schemas"]["UserRoles"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/{id}/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Blocks a user by their unique identifier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/{id}/unblock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Unblocks a user by their unique identifier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/{id}/verify-manual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Verifies a user manually by their unique identifier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/{id}/mentor-assignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a student's mentor assignments by their unique identifier. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MentorAssignmentDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/student-assignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a mentor's assignments by their unique identifier. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MentorAssignmentDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/assignment-mentor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Assigns a mentor to a student for a specific subject. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateMentorAssignmentDTO"];
                    "text/json": components["schemas"]["CreateMentorAssignmentDTO"];
                    "application/*+json": components["schemas"]["CreateMentorAssignmentDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/{id}/unassign-mentor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Unassigns a mentor from a student. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user settings.
         *     This includes theme, font size, and other user preferences.
         * @description This endpoint always returns settings and never null or NotFound.
         *     If the user has not set any settings, default values will be returned.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSettingsDTOApiResponseDTO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the current user settings. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserSettingsUpdateDTO"];
                    "text/json": components["schemas"]["UserSettingsUpdateDTO"];
                    "application/*+json": components["schemas"]["UserSettingsUpdateDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/work": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Searches for works based on the provided criteria. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    Skip?: number;
                    Take?: number;
                    search?: string;
                    Sort?: string;
                    sortOrder?: components["schemas"]["SortOrder"];
                    Filters?: components["schemas"]["Filter"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkDTOIEnumerableApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new work. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateWorkDTO"];
                    "text/json": components["schemas"]["CreateWorkDTO"];
                    "application/*+json": components["schemas"]["CreateWorkDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IdResponseDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/work/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific work by its ID.
         *     It will also include the work's associated tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkDTOApiResponseDTO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deletes a work by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates an existing work. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Universally Unique Lexicographically Sortable Identifier (ULID). */
                    id: components["schemas"]["Ulid"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": {
                        op: string;
                        path: string;
                        value?: Record<string, never>;
                    }[];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerializedNooException"];
                    };
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddHelperMentorOptionsDTO: {
            mentorId: components["schemas"]["Ulid"];
            notifyMentor?: boolean;
            notifyStudent?: boolean;
        };
        AssignedWorkAnswerModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            richTextContent?: components["schemas"]["IRichTextType"];
            wordContent?: string | null;
            mentorComment?: components["schemas"]["IRichTextType"];
            /** Format: int32 */
            score?: number | null;
            /** Format: int32 */
            maxScore?: number;
            status: components["schemas"]["AssignedWorkAnswerStatus"];
            detailedScore?: {
                [key: string]: number;
            } | null;
            taskId?: components["schemas"]["Ulid"];
            task?: components["schemas"]["WorkTaskModel"];
        };
        /** @enum {string} */
        AssignedWorkAnswerStatus: "not-submitted" | "submitted";
        /** @enum {string} */
        AssignedWorkCheckStatus: "not-checked" | "in-progress" | "checked";
        AssignedWorkCommentModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            content?: components["schemas"]["IRichTextType"];
            assignedWorkAsMainMentor?: components["schemas"]["AssignedWorkModel"];
            assignedWorkAsHelperMentor?: components["schemas"]["AssignedWorkModel"];
            assignedWorkAsStudent?: components["schemas"]["AssignedWorkModel"];
        };
        AssignedWorkDTO: Record<string, never>;
        AssignedWorkDTOApiResponseDTO: {
            data?: components["schemas"]["AssignedWorkDTO"];
            meta?: unknown;
        };
        AssignedWorkDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["AssignedWorkDTO"][] | null;
            meta?: unknown;
        };
        AssignedWorkModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            title: string;
            type: string;
            /** Format: int32 */
            attempt: number;
            solveStatus: components["schemas"]["AssignedWorkSolveStatus"];
            /** Format: date-time */
            solveDeadlineAt?: string | null;
            /** Format: date-time */
            solvedAt?: string | null;
            checkStatus: components["schemas"]["AssignedWorkCheckStatus"];
            /** Format: date-time */
            checkDeadlineAt?: string | null;
            /** Format: date-time */
            checkedAt?: string | null;
            /** Format: int32 */
            score?: number | null;
            /** Format: int32 */
            maxScore?: number;
            isArchivedByStudent: boolean;
            isArchivedByMentors: boolean;
            isArchivedByAssistants?: boolean;
            excludedTaskIds?: string[] | null;
            studentCommentId?: components["schemas"]["Ulid"];
            mainMentorCommentId?: components["schemas"]["Ulid"];
            helperMentorCommentId?: components["schemas"]["Ulid"];
            studentId?: components["schemas"]["Ulid"];
            mainMentorId?: components["schemas"]["Ulid"];
            helperMentorId?: components["schemas"]["Ulid"];
            workId?: components["schemas"]["Ulid"];
            work?: components["schemas"]["WorkModel"];
            student?: components["schemas"]["UserModel"];
            mainMentor?: components["schemas"]["UserModel"];
            helperMentor?: components["schemas"]["UserModel"];
            studentComment?: components["schemas"]["AssignedWorkCommentModel"];
            mainMentorComment?: components["schemas"]["AssignedWorkCommentModel"];
            helperMentorComment?: components["schemas"]["AssignedWorkCommentModel"];
            answers?: components["schemas"]["AssignedWorkAnswerModel"][] | null;
            statusHistory?: components["schemas"]["AssignedWorkStatusHistoryModel"][] | null;
            events?: components["schemas"]["CalendarEventModel"][] | null;
        };
        AssignedWorkProgressDTO: {
            id?: components["schemas"]["Ulid"];
            solve_status?: components["schemas"]["AssignedWorkSolveStatus"];
            /** Format: date-time */
            solved_at?: string | null;
            check_status?: components["schemas"]["AssignedWorkCheckStatus"];
            /** Format: date-time */
            checked_at?: string | null;
            /** Format: int32 */
            score?: number | null;
            /** Format: int32 */
            max_score?: number | null;
        };
        AssignedWorkProgressDTOApiResponseDTO: {
            data?: components["schemas"]["AssignedWorkProgressDTO"];
            meta?: unknown;
        };
        /** @enum {string} */
        AssignedWorkSolveStatus: "not-solved" | "in-progress" | "solved";
        AssignedWorkStatusHistoryModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            status?: components["schemas"]["AssignedWorkStatusHistoryType"];
            /** Format: date-time */
            changedAt?: string;
            value?: {
                [key: string]: string;
            } | null;
            assignedWorkId?: components["schemas"]["Ulid"];
            changedById?: components["schemas"]["Ulid"];
            assignedWork?: components["schemas"]["AssignedWorkModel"];
            changedBy?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        AssignedWorkStatusHistoryType: "started-solving" | "solve-deadline-shifted" | "solved" | "started-checking" | "check-deadline-shifted" | "checked" | "sent-on-recheck" | "sent-on-resolve";
        BooleanApiResponseDTO: {
            data?: boolean;
            meta?: unknown;
        };
        BulkCreateNotificationsDTO: Record<string, never>;
        CalendarEventDTO: {
            id?: components["schemas"]["Ulid"];
            assignedWorkId?: components["schemas"]["Ulid"];
            type?: components["schemas"]["CalendarEventType"];
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            startDateTime?: string;
            /** Format: date-time */
            endDateTime?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CalendarEventDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["CalendarEventDTO"][] | null;
            meta?: unknown;
        };
        CalendarEventModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            userId: components["schemas"]["Ulid"];
            assignedWorkId?: components["schemas"]["Ulid"];
            type: components["schemas"]["CalendarEventType"];
            title: string;
            description?: string | null;
            /** Format: date-time */
            startDateTime: string;
            /** Format: date-time */
            endDateTime?: string | null;
            user?: components["schemas"]["UserModel"];
            assignedWork?: components["schemas"]["AssignedWorkModel"];
        };
        /** @enum {string} */
        CalendarEventType: "custom" | "assigned-work-check-deadline" | "assigned-work-solve-deadline" | "assigned-work-cheked" | "assigned-work-solved";
        ChangeLogDTO: {
            version?: string | null;
            /** Format: date-time */
            date?: string;
            changes?: components["schemas"]["PlatformChange"][] | null;
        };
        ChangeLogDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["ChangeLogDTO"][] | null;
            meta?: unknown;
        };
        /** @enum {string} */
        ChangeType: "feature" | "bug-fix" | "optimization" | "refactor";
        ConfirmEmailChangeDTO: {
            token: string;
        };
        ConfirmPasswordChangeDTO: {
            token: string;
            newPassword: string;
        };
        CourseChapterModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            order: number;
            title: string;
            color?: string | null;
            isActive: boolean;
            courseId: components["schemas"]["Ulid"];
            parentChapterId?: components["schemas"]["Ulid"];
            course?: components["schemas"]["CourseModel"];
            parentChapter?: components["schemas"]["CourseChapterModel"];
            subChapters?: components["schemas"]["CourseChapterModel"][] | null;
            materials?: components["schemas"]["CourseMaterialModel"][] | null;
        };
        CourseDTO: {
            id?: components["schemas"]["Ulid"];
            name?: string | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            description?: string | null;
            thumbnailId?: components["schemas"]["Ulid"];
            thumbnail?: components["schemas"]["MediaDTO"];
            /** Format: int32 */
            memberCount?: number | null;
            subjectId?: components["schemas"]["Ulid"];
            subject?: components["schemas"]["SubjectDTO"];
        };
        CourseDTOApiResponseDTO: {
            data?: components["schemas"]["CourseDTO"];
            meta?: unknown;
        };
        CourseMaterialContentModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            content?: components["schemas"]["IRichTextType"];
            workId?: components["schemas"]["Ulid"];
            isWorkAvailable: boolean;
            /** Format: date-time */
            workSolveDeadlineAt?: string | null;
            /** Format: date-time */
            workCheckDeadlineAt?: string | null;
            work?: components["schemas"]["WorkModel"];
            material?: components["schemas"]["CourseMaterialModel"];
        };
        CourseMaterialModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            order: number;
            title: string;
            titleColor: string;
            isActive: boolean;
            /** Format: date-time */
            publishAt?: string | null;
            chapterId: components["schemas"]["Ulid"];
            contentId: components["schemas"]["Ulid"];
            chapter?: components["schemas"]["CourseChapterModel"];
            content?: components["schemas"]["CourseMaterialContentModel"];
            reactions?: components["schemas"]["CourseMaterialReactionModel"][] | null;
        };
        CourseMaterialReactionModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            materialId?: components["schemas"]["Ulid"];
            userId?: components["schemas"]["Ulid"];
            reaction?: components["schemas"]["CourseMaterialReactionTypes"];
            material?: components["schemas"]["CourseMaterialModel"];
            user?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        CourseMaterialReactionTypes: "check" | "thinking";
        CourseMembershipModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            isActive: boolean;
            isArchived?: boolean;
            courseId?: components["schemas"]["Ulid"];
            studentId?: components["schemas"]["Ulid"];
            assignerId?: components["schemas"]["Ulid"];
            course?: components["schemas"]["CourseModel"];
            student?: components["schemas"]["UserModel"];
            assigner?: components["schemas"]["UserModel"];
        };
        CourseModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            name: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            description?: string | null;
            thumbnailId?: components["schemas"]["Ulid"];
            subjectId?: components["schemas"]["Ulid"];
            thumbnail?: components["schemas"]["MediaModel"];
            chapters?: components["schemas"]["CourseChapterModel"][] | null;
            editors?: components["schemas"]["UserModel"][] | null;
            authors?: components["schemas"]["UserModel"][] | null;
            memberships?: components["schemas"]["CourseMembershipModel"][] | null;
            subject?: components["schemas"]["SubjectModel"];
        };
        CourseModelIEnumerableApiResponseDTO: {
            data?: components["schemas"]["CourseModel"][] | null;
            meta?: unknown;
        };
        CreateCalendarEventDTO: {
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            dateTime?: string;
        };
        CreateGoogleSheetsIntegrationDTO: Record<string, never>;
        CreateMentorAssignmentDTO: {
            studentId: components["schemas"]["Ulid"];
            mentorId: components["schemas"]["Ulid"];
            subjectId: components["schemas"]["Ulid"];
        };
        CreatePollDTO: {
            title: string;
            description?: string | null;
            isActive: boolean;
            questions: components["schemas"]["CreatePollQuestionDTO"][];
        };
        CreatePollQuestionDTO: {
            title: string;
            description?: string | null;
            isRequired?: boolean;
            type: components["schemas"]["PollQuestionType"];
            config?: components["schemas"]["PollQuestionConfig"];
        };
        CreateSnippetDTO: {
            name?: string | null;
            content?: components["schemas"]["IRichTextType"];
        };
        CreateSupportArticleDTO: {
            title: string;
            content?: components["schemas"]["IRichTextType"];
            isActive?: boolean;
            categoryId?: components["schemas"]["Ulid"];
        };
        CreateSupportCategoryDTO: {
            name: string;
            isPinned?: boolean;
            isActive?: boolean;
            parentId?: components["schemas"]["Ulid"];
        };
        CreateWorkDTO: {
            title: string;
            type: components["schemas"]["WorkType"];
            description?: string | null;
            subjectId: components["schemas"]["Ulid"];
            tasks: components["schemas"]["CreateWorkTaskDTO"][];
        };
        CreateWorkTaskDTO: {
            type: components["schemas"]["WorkTaskType"];
            /** Format: int32 */
            order: number;
            /** Format: int32 */
            maxScore: number;
            content: components["schemas"]["IRichTextType"];
            rightAnswers?: string[] | null;
            solveHint?: components["schemas"]["IRichTextType"];
            explanation?: components["schemas"]["IRichTextType"];
            checkStrategy?: components["schemas"]["WorkTaskCheckStrategy"];
            showAnswerBeforeCheck?: boolean;
            checkOneByOne?: boolean;
        };
        /** @enum {string} */
        DeviceType: "unknown" | "desktop" | "mobile" | "tablet";
        Filter: {
            field?: string | null;
            type?: components["schemas"]["FilterType"];
            values?: unknown[] | null;
        };
        /** @enum {string} */
        FilterType: "equals" | "not-equals" | "range" | "contains" | "array";
        /** @enum {string} */
        FontSize: "small" | "normal" | "large";
        GoogleSheetsIntegrationDTO: Record<string, never>;
        GoogleSheetsIntegrationDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["GoogleSheetsIntegrationDTO"][] | null;
            meta?: unknown;
        };
        IRichTextType: Record<string, never>;
        IdResponseDTO: {
            id?: components["schemas"]["Ulid"];
        };
        IdResponseDTOApiResponseDTO: {
            data?: components["schemas"]["IdResponseDTO"];
            meta?: unknown;
        };
        LoginDTO: {
            usernameOrEmail: string;
            password: string;
        };
        LoginResponseDTO: {
            accessToken?: string | null;
            /** Format: date-time */
            expiresAt?: string;
            userInfo?: components["schemas"]["UserInfoDTO"];
        };
        LoginResponseDTOApiResponseDTO: {
            data?: components["schemas"]["LoginResponseDTO"];
            meta?: unknown;
        };
        MediaDTO: Record<string, never>;
        MediaModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            order: number;
            hash?: string | null;
            path: string;
            name: string;
            actualName?: string | null;
            extension: string;
            /** Format: int64 */
            size?: number;
            courses?: components["schemas"]["CourseModel"][] | null;
            nooTubeVideoThumbnail?: components["schemas"]["NooTubeVideoModel"];
            userAvatar?: components["schemas"]["UserAvatarModel"];
        };
        MentorAssignmentDTO: {
            id?: components["schemas"]["Ulid"];
            studentId?: components["schemas"]["Ulid"];
            student?: components["schemas"]["UserDTO"];
            mentorId?: components["schemas"]["Ulid"];
            mentor?: components["schemas"]["UserDTO"];
            subjectId?: components["schemas"]["Ulid"];
            subject?: components["schemas"]["SubjectDTO"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        MentorAssignmentDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["MentorAssignmentDTO"][] | null;
            meta?: unknown;
        };
        MentorAssignmentModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            mentorId?: components["schemas"]["Ulid"];
            studentId?: components["schemas"]["Ulid"];
            subjectId?: components["schemas"]["Ulid"];
            student?: components["schemas"]["UserModel"];
            subject?: components["schemas"]["SubjectModel"];
            mentor?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        NooTubeServiceType: "noo-tube" | "you-tube" | "vk-video" | "rutube";
        NooTubeVideoCommentDTO: {
            id?: components["schemas"]["Ulid"];
            user_id?: components["schemas"]["Ulid"];
            user?: components["schemas"]["UserDTO"];
            content?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        NooTubeVideoCommentModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            videoId: components["schemas"]["Ulid"];
            userId: components["schemas"]["Ulid"];
            content: string;
            video?: components["schemas"]["NooTubeVideoModel"];
            user?: components["schemas"]["UserModel"];
        };
        NooTubeVideoDTO: {
            id?: components["schemas"]["Ulid"];
            title?: string | null;
            description?: string | null;
            thumbnailId?: components["schemas"]["Ulid"];
            externalIdentifier?: string | null;
            externalUrl?: string | null;
            externalThumbnailUrl?: string | null;
            serviceType?: components["schemas"]["NooTubeServiceType"];
            state?: components["schemas"]["VideoState"];
            /** Format: int32 */
            duration?: number | null;
            /** Format: date-time */
            publishedAt?: string;
            uploadedById?: components["schemas"]["Ulid"];
            uploadedBy?: components["schemas"]["UserDTO"];
            thumbnail?: components["schemas"]["MediaDTO"];
            comments?: components["schemas"]["NooTubeVideoCommentDTO"][] | null;
        };
        NooTubeVideoDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["NooTubeVideoDTO"][] | null;
            meta?: unknown;
        };
        NooTubeVideoModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            title: string;
            description?: string | null;
            thumbnailId?: components["schemas"]["Ulid"];
            externalIdentifier?: string | null;
            externalUrl?: string | null;
            externalThumbnailUrl?: string | null;
            serviceType: components["schemas"]["NooTubeServiceType"];
            state: components["schemas"]["VideoState"];
            /** Format: int32 */
            duration?: number | null;
            /** Format: date-time */
            publishedAt?: string | null;
            uploadedById?: components["schemas"]["Ulid"];
            uploadedByUser?: components["schemas"]["UserModel"];
            thumbnail?: components["schemas"]["MediaModel"];
            comments?: components["schemas"]["NooTubeVideoCommentModel"][] | null;
            reactions?: components["schemas"]["NooTubeVideoReactionModel"][] | null;
        };
        NooTubeVideoReactionModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            userId: components["schemas"]["Ulid"];
            videoId: components["schemas"]["Ulid"];
            reaction?: components["schemas"]["VideoReaction"];
            user?: components["schemas"]["UserModel"];
            video?: components["schemas"]["NooTubeVideoModel"];
        };
        NotificationDTO: {
            id?: components["schemas"]["Ulid"];
            type?: string | null;
            title?: string | null;
            message?: string | null;
            is_read?: boolean;
            is_banner?: boolean;
            link?: string | null;
            link_text?: string | null;
        };
        NotificationDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["NotificationDTO"][] | null;
            meta?: unknown;
        };
        NotificationModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            userId: components["schemas"]["Ulid"];
            type: string;
            title: string;
            message: string;
            isRead: boolean;
            isBanner: boolean;
            link?: string | null;
            linkText?: string | null;
            user?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        ParticipatingUserType: "authenticated-user" | "telegram-user";
        PlatformChange: {
            type?: components["schemas"]["ChangeType"];
            author?: string | null;
            description?: string | null;
        };
        PollAnswerModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            pollQuestionId: components["schemas"]["Ulid"];
            value: components["schemas"]["PollAnswerValue"];
            pollQuestion?: components["schemas"]["PollQuestionModel"];
        };
        PollAnswerValue: {
            type?: components["schemas"]["PollQuestionType"];
            value?: unknown;
        };
        PollDTO: {
            id?: components["schemas"]["Ulid"];
            title?: string | null;
            description?: string | null;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            questions?: components["schemas"]["PollQuestionDTO"][] | null;
        };
        PollDTOApiResponseDTO: {
            data?: components["schemas"]["PollDTO"];
            meta?: unknown;
        };
        PollDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["PollDTO"][] | null;
            meta?: unknown;
        };
        PollModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            title: string;
            description?: string | null;
            isActive: boolean;
            isAuthRequired: boolean;
            questions?: components["schemas"]["PollQuestionModel"][] | null;
            participations?: components["schemas"]["PollParticipationModel"][] | null;
        };
        PollParticipationModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            pollId: components["schemas"]["Ulid"];
            userType: components["schemas"]["ParticipatingUserType"];
            userExternalIdentifier?: string | null;
            userExternalData?: components["schemas"]["PollUserExternalData"];
            userId?: components["schemas"]["Ulid"];
            poll?: components["schemas"]["PollModel"];
            user?: components["schemas"]["UserModel"];
            answers?: components["schemas"]["PollAnswerModel"][] | null;
        };
        PollQuestionConfig: {
            type: components["schemas"]["PollQuestionType"];
            /** Format: int32 */
            minChoices?: number | null;
            /** Format: int32 */
            maxChoices?: number | null;
            /** Format: int32 */
            minTextLength?: number | null;
            /** Format: int32 */
            maxTextLength?: number | null;
            /** Format: int32 */
            minIntValue?: number | null;
            /** Format: int32 */
            maxIntValue?: number | null;
            /** Format: int32 */
            minRating?: number | null;
            /** Format: int32 */
            maxRating?: number | null;
            /**
             * Format: int32
             * @description Maximum file size in bytes
             */
            maxFileSize?: number | null;
            /** @description Allowed file types (MIME types) */
            allowedFileTypes?: string[] | null;
            /** Format: int32 */
            maxFileCount?: number | null;
        };
        PollQuestionDTO: {
            id?: components["schemas"]["Ulid"];
            title?: string | null;
            description?: string | null;
            isRequired?: boolean;
            type?: components["schemas"]["PollQuestionType"];
            config?: components["schemas"]["PollQuestionConfig"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        PollQuestionModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            order: number;
            pollId: components["schemas"]["Ulid"];
            title: string;
            description?: string | null;
            isRequired: boolean;
            type: components["schemas"]["PollQuestionType"];
            config?: components["schemas"]["PollQuestionConfig"];
            poll?: components["schemas"]["PollModel"];
            answers?: components["schemas"]["PollAnswerModel"][] | null;
        };
        /** @enum {string} */
        PollQuestionType: "checkbox" | "single-choice" | "multiple-choice" | "text" | "number" | "date" | "date-time" | "rating" | "files";
        PollUserExternalData: Record<string, never>;
        RegisterDTO: {
            name: string;
            username: string;
            password: string;
            /** Format: email */
            email: string;
        };
        RemakeAssignedWorkOptionsDTO: {
            includeOnlyWrongTasks?: boolean;
        };
        ReplaceMainMentorOptionsDTO: {
            mentorId: components["schemas"]["Ulid"];
            notifyMentor?: boolean;
            notifyStudent?: boolean;
        };
        RequestPasswordChangeDTO: {
            /** Format: email */
            email: string;
        };
        SerializedNooException: {
            id?: string | null;
            logId?: string | null;
            /** Format: int32 */
            statusCode?: number;
            message?: string | null;
            payload?: unknown;
        };
        SessionDTO: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            lastRequestAt?: string;
            device?: string | null;
            os?: string | null;
            browser?: string | null;
            deviceType?: components["schemas"]["DeviceType"];
        };
        SessionDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["SessionDTO"][] | null;
            meta?: unknown;
        };
        SessionModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            ipAddress?: string | null;
            userAgent?: string | null;
            device?: string | null;
            deviceType?: components["schemas"]["DeviceType"];
            os?: string | null;
            browser?: string | null;
            userId: components["schemas"]["Ulid"];
            user?: components["schemas"]["UserModel"];
        };
        ShiftAssignedWorkDeadlineOptionsDTO: {
            /** Format: date-time */
            newDeadline: string;
            notifyOthers?: boolean;
        };
        SnippetDTO: {
            id?: components["schemas"]["Ulid"];
            name?: string | null;
            content?: components["schemas"]["IRichTextType"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SnippetDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["SnippetDTO"][] | null;
            meta?: unknown;
        };
        SnippetModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            name?: string | null;
            content?: components["schemas"]["IRichTextType"];
            userId?: components["schemas"]["Ulid"];
            user?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        SortOrder: "ascending" | "descending";
        StatisticsBlockDTO: {
            title?: string | null;
            description?: string | null;
            graph?: components["schemas"]["StatisticsGraphDTO"];
            numberBlocks?: components["schemas"]["StatisticsNumberBlockDTO"][] | null;
        };
        StatisticsDTO: {
            blocks?: components["schemas"]["StatisticsBlockDTO"][] | null;
        };
        StatisticsDTOApiResponseDTO: {
            data?: components["schemas"]["StatisticsDTO"];
            meta?: unknown;
        };
        StatisticsGraphDTO: Record<string, never>;
        StatisticsNumberBlockDTO: {
            title?: string | null;
            description?: string | null;
            value?: string | null;
            units?: string | null;
            subValues?: {
                [key: string]: number;
            } | null;
        };
        StringApiResponseDTO: {
            data?: string | null;
            meta?: unknown;
        };
        SubjectCreationDTO: {
            name: string;
            color: string;
        };
        SubjectDTO: {
            id?: components["schemas"]["Ulid"];
            name?: string | null;
            color?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SubjectDTOApiResponseDTO: {
            data?: components["schemas"]["SubjectDTO"];
            meta?: unknown;
        };
        SubjectDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["SubjectDTO"][] | null;
            meta?: unknown;
        };
        SubjectModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            name: string;
            color: string;
            mentorAssignments?: components["schemas"]["MentorAssignmentModel"][] | null;
            works?: components["schemas"]["WorkModel"][] | null;
            courses?: components["schemas"]["CourseModel"][] | null;
        };
        SubjectUpdateDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["SubjectUpdateDTOOperation"][] | null;
        };
        SubjectUpdateDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        SupportArticleDTO: {
            id?: components["schemas"]["Ulid"];
            title?: string | null;
            content?: components["schemas"]["IRichTextType"];
            isActive?: boolean;
            categoryId?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SupportArticleDTOApiResponseDTO: {
            data?: components["schemas"]["SupportArticleDTO"];
            meta?: unknown;
        };
        SupportCategoryDTO: {
            id?: components["schemas"]["Ulid"];
            name?: string | null;
            isPinned?: boolean;
            isActive?: boolean;
            parentId?: components["schemas"]["Ulid"];
            children?: components["schemas"]["SupportCategoryDTO"][] | null;
            articles?: components["schemas"]["SupportArticleDTO"][] | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SupportCategoryDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["SupportCategoryDTO"][] | null;
            meta?: unknown;
        };
        /**
         * Format: ulid
         * @description Universally Unique Lexicographically Sortable Identifier (ULID).
         * @example 01ARZ3NDEKTSV4RRFFQ69G5FAV
         */
        Ulid: string;
        UpdateAvatarDTO: Record<string, never>;
        UpdateEmailDTO: {
            /** Format: email */
            email: string;
        };
        UpdatePasswordDTO: {
            password: string;
        };
        UpdatePollDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["UpdatePollDTOOperation"][] | null;
        };
        UpdatePollDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        UpdateSnippetDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["UpdateSnippetDTOOperation"][] | null;
        };
        UpdateSnippetDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        UpdateSupportArticleDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["UpdateSupportArticleDTOOperation"][] | null;
        };
        UpdateSupportArticleDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        UpdateSupportCategoryDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["UpdateSupportCategoryDTOOperation"][] | null;
        };
        UpdateSupportCategoryDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        /** @description DTO for updating Telegram user information.
         *     Does not follow the same pattern as other DTOs because it is generated by Telegram. */
        UpdateTelegramDTO: {
            username?: string | null;
            id: string;
            /** Format: uri */
            photo_url?: string | null;
            first_name?: string | null;
            last_name?: string | null;
            /** Format: int64 */
            auth_date?: number;
            hash?: string | null;
        };
        UpdateWorkDTOJsonPatchDocument: {
            readonly operations?: components["schemas"]["UpdateWorkDTOOperation"][] | null;
        };
        UpdateWorkDTOOperation: {
            path?: string | null;
            op?: string | null;
            from?: string | null;
            value?: unknown;
        };
        UpsertAssignedWorkAnswerDTO: {
            id?: components["schemas"]["Ulid"];
            richTextContent?: components["schemas"]["IRichTextType"];
            wordContent?: string | null;
            mentorComment?: components["schemas"]["IRichTextType"];
            /** Format: int32 */
            score?: number | null;
            /** Format: int32 */
            maxScore?: number;
            detailedScore?: {
                [key: string]: number;
            } | null;
            status: components["schemas"]["AssignedWorkAnswerStatus"];
            taskId: components["schemas"]["Ulid"];
        };
        UpsertAssignedWorkCommentDTO: {
            id?: components["schemas"]["Ulid"];
            content?: components["schemas"]["IRichTextType"];
        };
        UserAvatarModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            avatarType: components["schemas"]["UserAvatarType"];
            avatarUrl?: string | null;
            mediaId?: components["schemas"]["Ulid"];
            userId: components["schemas"]["Ulid"];
            media?: components["schemas"]["MediaModel"];
            user?: components["schemas"]["UserModel"];
        };
        /** @enum {string} */
        UserAvatarType: "none" | "custom" | "telegram";
        UserDTO: {
            id?: components["schemas"]["Ulid"];
            username?: string | null;
            email?: string | null;
            name?: string | null;
            telegramId?: string | null;
            telegramUsername?: string | null;
            role?: components["schemas"]["UserRoles"];
            isBlocked?: boolean;
            isVerified?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        UserDTOApiResponseDTO: {
            data?: components["schemas"]["UserDTO"];
            meta?: unknown;
        };
        UserDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["UserDTO"][] | null;
            meta?: unknown;
        };
        UserInfoDTO: {
            id?: components["schemas"]["Ulid"];
            name?: string | null;
            username?: string | null;
            email?: string | null;
            role?: components["schemas"]["UserRoles"];
        };
        UserModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            name: string;
            username: string;
            /** Format: email */
            email: string;
            telegramId?: string | null;
            telegramUsername?: string | null;
            passwordHash: string;
            role: components["schemas"]["UserRoles"];
            isBlocked: boolean;
            isVerified: boolean;
            coursesAsAuthor?: components["schemas"]["CourseModel"][] | null;
            coursesAsEditor?: components["schemas"]["CourseModel"][] | null;
            avatar?: components["schemas"]["UserAvatarModel"];
            coursesAsMember?: components["schemas"]["CourseMembershipModel"][] | null;
            coursesAsAssigner?: components["schemas"]["CourseMembershipModel"][] | null;
            courseMaterialReactions?: components["schemas"]["CourseMaterialReactionModel"][] | null;
            sessions?: components["schemas"]["SessionModel"][] | null;
            snippets?: components["schemas"]["SnippetModel"][] | null;
            pollParticipations?: components["schemas"]["PollParticipationModel"][] | null;
            calendarEvents?: components["schemas"]["CalendarEventModel"][] | null;
            notifications?: components["schemas"]["NotificationModel"][] | null;
            settings?: components["schemas"]["UserSettingsModel"];
            uploadedVideos?: components["schemas"]["NooTubeVideoModel"][] | null;
            nooTubeVideoComments?: components["schemas"]["NooTubeVideoCommentModel"][] | null;
            nooTubeVideoReactions?: components["schemas"]["NooTubeVideoReactionModel"][] | null;
            assignedWorkHistoryChanges?: components["schemas"]["AssignedWorkStatusHistoryModel"][] | null;
        };
        /** @enum {string} */
        UserRoles: "admin" | "teacher" | "mentor" | "assistant" | "student";
        UserSettingsDTO: {
            theme?: components["schemas"]["UserTheme"];
            fontSize?: components["schemas"]["FontSize"];
        };
        UserSettingsDTOApiResponseDTO: {
            data?: components["schemas"]["UserSettingsDTO"];
            meta?: unknown;
        };
        UserSettingsModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            userId: components["schemas"]["Ulid"];
            theme?: string | null;
            fontSize?: string | null;
            user?: components["schemas"]["UserModel"];
        };
        UserSettingsUpdateDTO: {
            theme?: components["schemas"]["UserTheme"];
            fontSize?: components["schemas"]["FontSize"];
        };
        /** @enum {string} */
        UserTheme: "light" | "dark" | "system-default";
        /** @enum {string} */
        VideoReaction: "like" | "dislike" | "heart" | "laugh" | "sad" | "mindblowing";
        /** @enum {string} */
        VideoState: "not-uploaded" | "uploading" | "uploaded" | "published";
        WorkDTO: {
            id?: components["schemas"]["Ulid"];
            title?: string | null;
            type?: string | null;
            description?: string | null;
            subjectId?: components["schemas"]["Ulid"];
            subject?: components["schemas"]["SubjectDTO"];
            tasks?: components["schemas"]["WorkTaskDTO"][] | null;
        };
        WorkDTOApiResponseDTO: {
            data?: components["schemas"]["WorkDTO"];
            meta?: unknown;
        };
        WorkDTOIEnumerableApiResponseDTO: {
            data?: components["schemas"]["WorkDTO"][] | null;
            meta?: unknown;
        };
        WorkModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            title: string;
            type: components["schemas"]["WorkType"];
            description?: string | null;
            subjectId?: components["schemas"]["Ulid"];
            tasks?: components["schemas"]["WorkTaskModel"][] | null;
            subject?: components["schemas"]["SubjectModel"];
            courseMaterialContents?: components["schemas"]["CourseMaterialContentModel"][] | null;
        };
        /** @enum {string} */
        WorkTaskCheckStrategy: "manual" | "exact-match-or-zero" | "exact-match-with-wrong-character" | "multiple-choice" | "sequence";
        WorkTaskDTO: {
            id?: components["schemas"]["Ulid"];
            type?: components["schemas"]["WorkTaskType"];
            /** Format: int32 */
            order?: number;
            /** Format: int32 */
            maxScore?: number;
            content?: components["schemas"]["IRichTextType"];
            rightAnswer?: string[] | null;
            solveHint?: components["schemas"]["IRichTextType"];
            explanation?: components["schemas"]["IRichTextType"];
            checkStrategy?: components["schemas"]["WorkTaskCheckStrategy"];
            showAnswerBeforeCheck?: boolean;
            checkOneByOne?: boolean;
        };
        WorkTaskModel: {
            id?: components["schemas"]["Ulid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            order: number;
            content: components["schemas"]["IRichTextType"];
            solveHint?: components["schemas"]["IRichTextType"];
            explanation?: components["schemas"]["IRichTextType"];
            rightAnswers?: string[] | null;
            type: components["schemas"]["WorkTaskType"];
            checkStrategy: components["schemas"]["WorkTaskCheckStrategy"];
            /** Format: int32 */
            maxScore: number;
            showAnswerBeforeCheck?: boolean;
            checkOneByOne?: boolean;
            workId?: components["schemas"]["Ulid"];
            work?: components["schemas"]["WorkModel"];
        };
        /** @enum {string} */
        WorkTaskType: "word" | "text" | "essay" | "final-essay";
        /** @enum {string} */
        WorkType: "test" | "mini-test" | "phrase" | "trial-work" | "second-part";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
